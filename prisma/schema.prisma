// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  storeId               String
  username              String?   @unique
  email                 String?   @unique
  name                  String?
  password              String?
  imageUrl              String?
  imageName             String?
  twoFactorConfirmation TwoFactorConfirmation?
  isTwoFactorEnabled    Boolean @default(false)
  accounts              Account[]
  image                 String?
  emailVerified         DateTime?
  address1              String?
  address2              String?
  city                  String?
  state                 String?
  phone                 String?
  postalCode            String?
  country               String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Account {
  id                    String  @id @default(cuid())
  myUserId              String?
  userId                String?
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?  @db.Text
  access_token          String?  @db.Text
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?  @db.Text
  session_state         String?
  user                  User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                    String @id @default(cuid())
  email                 String
  token                 String @unique
  expires               DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                    String @id @default(cuid())
  email                 String
  token                 String @unique
  expires               DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                    String @id @default(cuid())
  email                 String
  token                 String @unique
  expires               DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                    String @id @default(cuid())
  myUserId              String? @unique
  userId                String? @unique // Add @unique attribute to ensure uniqueness

  user                  User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}